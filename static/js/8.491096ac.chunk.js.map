{"version":3,"sources":["routes.js","components/AppBreadcrumb.js","components/AppContent.js","components/AppFooter.js","components/AppHeader.js","_nav.js","components/AppSidebar.js","layout/DefaultLayout.js"],"names":["routes","path","exact","name","component","React","lazy","AppBreadcrumb","currentLocation","useLocation","pathname","getRouteName","find","route","breadcrumbs","location","split","reduce","prev","curr","index","array","currentPathname","push","active","length","getBreadcrumbs","className","href","map","breadcrumb","key","memo","AppContent","property","console","log","lg","fallback","color","idx","render","props","data","from","to","AppFooter","target","rel","AppHeader","useDispatch","useSelector","state","sidebarShow","position","fluid","_nav","_component","as","NavLink","anchor","icon","customClasses","badge","text","AppSidebar","dispatch","unfoldable","sidebarUnfoldable","selfHiding","show","onShow","onHide","type","items","navigation","DefaultLayout"],"mappings":"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","file":"static/js/8.491096ac.chunk.js","sourcesContent":["import React from 'react'\n\nconst Charts = React.lazy(() => import('./views/components/charts/Charts'))\nconst Dashboard = React.lazy(() => import('./views/dashboard/Dashboard'))\n\nconst routes = [\n  { path: '/', exact: true, name: 'Home' },\n  { path: '/dashboard', name: 'Dashboard', component: Dashboard },\n  \n]\n\nexport default routes\n","import React from 'react'\nimport { useLocation } from 'react-router-dom'\n\nimport routes from '../routes'\n\nimport { CBreadcrumb, CBreadcrumbItem } from '@coreui/react'\n\nconst AppBreadcrumb = () => {\n  const currentLocation = useLocation().pathname\n\n  const getRouteName = (pathname, routes) => {\n    const currentRoute = routes.find((route) => route.path === pathname)\n    return currentRoute.name\n  }\n\n  const getBreadcrumbs = (location) => {\n    const breadcrumbs = []\n    location.split('/').reduce((prev, curr, index, array) => {\n      const currentPathname = `${prev}/${curr}`\n      breadcrumbs.push({\n        pathname: currentPathname,\n        name: getRouteName(currentPathname, routes),\n        active: index + 1 === array.length ? true : false,\n      })\n      return currentPathname\n    })\n    return breadcrumbs\n  }\n\n  const breadcrumbs = getBreadcrumbs(currentLocation)\n\n  return (\n    <CBreadcrumb className=\"m-0 ms-2\">\n      <CBreadcrumbItem href=\"/\">Home</CBreadcrumbItem>\n      {breadcrumbs.map((breadcrumb, index) => {\n        return (\n          <CBreadcrumbItem\n            {...(breadcrumb.active ? { active: true } : { href: breadcrumb.pathname })}\n            key={index}\n          >\n            {breadcrumb.name}\n          </CBreadcrumbItem>\n        )\n      })}\n    </CBreadcrumb>\n  )\n}\n\nexport default React.memo(AppBreadcrumb)\n","import React, { Suspense } from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport { CContainer, CSpinner } from '@coreui/react'\n\n// routes config\nimport routes from '../routes'\n\nconst AppContent = (property) => {\n  console.log(\"content\",property);\n  return (\n    <CContainer lg>\n      <Suspense fallback={<CSpinner color=\"primary\" />}>\n        <Switch >\n          {routes.map((route, idx) => {\n            return (\n              route.component && (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  \n                  render={(props) => (\n                    <>\n                      <route.component {...props} data={property.data} />\n                    </>\n                  )}\n                />\n              )\n            )\n          })}\n          <Redirect from=\"/\" to=\"/dashboard\" />\n        </Switch>\n      </Suspense>\n    </CContainer>\n  )\n}\n\nexport default React.memo(AppContent)\n","import React from 'react'\nimport { CFooter } from '@coreui/react'\n\nconst AppFooter = () => {\n  return (\n    <CFooter>\n      <div>\n        <a href=\"https://raviresume.herokuapp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Ravi Pratap Singh\n        </a> \n      </div>\n      <div className=\"ms-auto\">\n        <span className=\"me-1\">Created by</span>\n        <a href=\"https://raviresume.herokuapp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Ravi Pratap Singh\n        </a>\n      </div>\n    </CFooter>\n  )\n}\n\nexport default React.memo(AppFooter)\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CContainer,\n  CHeader,\n  CHeaderBrand,\n  CHeaderDivider,\n  CHeaderNav,\n  CHeaderToggler,\n  CNavLink,\n  CNavItem,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nimport { AppBreadcrumb } from './index'\n\nimport { AppHeaderDropdown } from './header/index'\n\nconst AppHeader = () => {\n  const dispatch = useDispatch()\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n\n  return (\n    <CHeader position=\"sticky\" className=\"mb-4\">\n      <CContainer fluid>\n        <AppBreadcrumb />\n      </CContainer>\n    </CHeader>\n  )\n}\n\nexport default AppHeader\n","import React from 'react'\nimport CIcon from '@coreui/icons-react'\nimport { NavLink } from 'react-router-dom'\n\nconst _nav = [\n  {\n    _component: 'CNavItem',\n    as: NavLink,\n    anchor: 'Dashboard',\n    to: '/dashboard',\n    icon: <CIcon name=\"cil-speedometer\" customClasses=\"nav-icon\" />,\n    badge: {\n      color: 'info',\n      text: 'NEW',\n    },\n  },\n  \n]\n\nexport default _nav\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport {\n  CSidebar,\n  CSidebarBrand,\n  CSidebarNav,\n  CSidebarToggler,\n  CCreateNavItem,\n} from '@coreui/react'\n\nimport CIcon from '@coreui/icons-react'\n\nimport SimpleBar from 'simplebar-react'\nimport 'simplebar/dist/simplebar.min.css'\n\n// sidebar nav config\nimport navigation from '../_nav'\n\nconst AppSidebar = () => {\n  const dispatch = useDispatch()\n  const unfoldable = useSelector((state) => state.sidebarUnfoldable)\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n\n  return (\n    <CSidebar\n      position=\"fixed\"\n      selfHiding=\"md\"\n      unfoldable={unfoldable}\n      show={sidebarShow}\n      onShow={() => console.log('show')}\n      onHide={() => {\n        dispatch({ type: 'set', sidebarShow: false })\n      }}\n    >\n      \n      <CSidebarNav>\n        <SimpleBar>\n          <CCreateNavItem items={navigation} />\n        </SimpleBar>\n      </CSidebarNav>\n    </CSidebar>\n  )\n}\n\nexport default React.memo(AppSidebar)\n","import React from 'react'\nimport { AppContent, AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nconst DefaultLayout = (props) => {\n  console.log(\"dafaultlt\", props);\n  return (\n    <div>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n          <AppContent data={props.data}/>\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DefaultLayout\n"],"sourceRoot":""}